// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createGuild = `-- name: CreateGuild :execresult
INSERT INTO guilds (name, discord_id)
VALUES ($1, $2)
`

func (q *Queries) CreateGuild(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createGuild)
}

const createSystemUser = `-- name: CreateSystemUser :execresult
INSERT INTO system_users (discord_id)
VALUES ($1)
`

func (q *Queries) CreateSystemUser(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSystemUser)
}

const createSystemUserGuild = `-- name: CreateSystemUserGuild :execresult
INSERT INTO system_user_guild (system_user_id, guild_id)
VALUES ($1, $2)
`

func (q *Queries) CreateSystemUserGuild(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSystemUserGuild)
}

const createToken = `-- name: CreateToken :execresult
INSERT INTO tokens (
    system_user_id,
    access_token,
    token_type,
    refresh_token,
    expiry
  )
VALUES ($1, $2, $3, $4, $5)
`

func (q *Queries) CreateToken(ctx context.Context) (sql.Result, error) {
	return q.db.ExecContext(ctx, createToken)
}

const deleteGuild = `-- name: DeleteGuild :exec
DELETE FROM guilds
WHERE id = $1
`

func (q *Queries) DeleteGuild(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteGuild)
	return err
}

const deleteSystemUser = `-- name: DeleteSystemUser :exec
DELETE FROM system_users
WHERE id = $1
`

func (q *Queries) DeleteSystemUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteSystemUser)
	return err
}

const deleteSystemUserGuild = `-- name: DeleteSystemUserGuild :exec
DELETE FROM system_user_guild
WHERE system_user_id = $1
  AND guild_id = $2
`

func (q *Queries) DeleteSystemUserGuild(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteSystemUserGuild)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = $1
`

func (q *Queries) DeleteToken(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteToken)
	return err
}

const findByDiscordIDGuild = `-- name: FindByDiscordIDGuild :one
SELECT id, name, discord_id, sheet_id, created_at, updated_at
FROM guilds
WHERE discord_id = $1
LIMIT 1
`

func (q *Queries) FindByDiscordIDGuild(ctx context.Context) (Guild, error) {
	row := q.db.QueryRowContext(ctx, findByDiscordIDGuild)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscordID,
		&i.SheetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByDiscordIDSystemUser = `-- name: FindByDiscordIDSystemUser :one
SELECT id, discord_id, created_at, updated_at
FROM system_users
WHERE discord_id = $1
LIMIT 1
`

func (q *Queries) FindByDiscordIDSystemUser(ctx context.Context) (SystemUser, error) {
	row := q.db.QueryRowContext(ctx, findByDiscordIDSystemUser)
	var i SystemUser
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByGuildIDSystemUserGuild = `-- name: FindByGuildIDSystemUserGuild :many
SELECT system_user_id, guild_id, created_at, updated_at
FROM system_user_guild
WHERE guild_id = $1
`

func (q *Queries) FindByGuildIDSystemUserGuild(ctx context.Context) ([]SystemUserGuild, error) {
	rows, err := q.db.QueryContext(ctx, findByGuildIDSystemUserGuild)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemUserGuild
	for rows.Next() {
		var i SystemUserGuild
		if err := rows.Scan(
			&i.SystemUserID,
			&i.GuildID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByIDGuild = `-- name: FindByIDGuild :one
SELECT id, name, discord_id, sheet_id, created_at, updated_at
FROM guilds
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindByIDGuild(ctx context.Context) (Guild, error) {
	row := q.db.QueryRowContext(ctx, findByIDGuild)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscordID,
		&i.SheetID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByIDSystemUser = `-- name: FindByIDSystemUser :one
SELECT id, discord_id, created_at, updated_at
FROM system_users
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindByIDSystemUser(ctx context.Context) (SystemUser, error) {
	row := q.db.QueryRowContext(ctx, findByIDSystemUser)
	var i SystemUser
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByIDSystemUserGuild = `-- name: FindByIDSystemUserGuild :one
SELECT system_user_id, guild_id, created_at, updated_at
FROM system_user_guild
WHERE guild_id = $1
  AND system_user_id = $2
`

func (q *Queries) FindByIDSystemUserGuild(ctx context.Context) (SystemUserGuild, error) {
	row := q.db.QueryRowContext(ctx, findByIDSystemUserGuild)
	var i SystemUserGuild
	err := row.Scan(
		&i.SystemUserID,
		&i.GuildID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findByIDToken = `-- name: FindByIDToken :one
SELECT id, system_user_id, access_token, token_type, refresh_token, expiry, created_at, updated_at
FROM tokens
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindByIDToken(ctx context.Context) (Token, error) {
	row := q.db.QueryRowContext(ctx, findByIDToken)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.SystemUserID,
		&i.AccessToken,
		&i.TokenType,
		&i.RefreshToken,
		&i.Expiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findBySystemUserIDSystemUserGuild = `-- name: FindBySystemUserIDSystemUserGuild :many
SELECT system_user_id, guild_id, created_at, updated_at
FROM system_user_guild
WHERE system_user_id = $1
`

func (q *Queries) FindBySystemUserIDSystemUserGuild(ctx context.Context) ([]SystemUserGuild, error) {
	rows, err := q.db.QueryContext(ctx, findBySystemUserIDSystemUserGuild)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SystemUserGuild
	for rows.Next() {
		var i SystemUserGuild
		if err := rows.Scan(
			&i.SystemUserID,
			&i.GuildID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByUserIDToken = `-- name: FindByUserIDToken :one
SELECT id, system_user_id, access_token, token_type, refresh_token, expiry, created_at, updated_at
FROM tokens
WHERE system_user_id = $1
LIMIT 1
`

func (q *Queries) FindByUserIDToken(ctx context.Context) (Token, error) {
	row := q.db.QueryRowContext(ctx, findByUserIDToken)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.SystemUserID,
		&i.AccessToken,
		&i.TokenType,
		&i.RefreshToken,
		&i.Expiry,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
